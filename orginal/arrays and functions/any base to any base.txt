Any Base To Any Base
Easy

1. You are given a number n.
2. You are given a base b1. n is a number on base b.
3. You are given another base b2.
4. You are required to convert the number n of base b1 to a number in base b2.

Constraints
0 <= n <= 512
2 <= b1 <= 10
2 <= b2 <= 10

Format
Input
A number n
A base b1
A base b2

Output
A number of base b2 equal in value to n of base b1.

Example
Sample Input

111001
2
3

Sample Output
2010

import java.util.*;

public class Main{

public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int b1 = scn.nextInt();
    int b2 = scn.nextInt();

    int d = getValue(n, b1, b2);
    System.out.println(d);
 }

 public static int getValue(int n, int b1, int b2){
     int d1 = getValueIndecimal(n, b1);
     int d2 = getValueInBase(d1, b2);
     return d2;
 }

 public static int getValueIndecimal(int n, int b){
    int rv = 0;

   int p = 1;
   while(n > 0){
       int d = n % 10;
       n = n / 10;
       rv += p * d;
       p = p * b;
   }

    return rv;
}

 public static int getValueInBase(int n, int b){
    int rv = 0;

   int p = 1;
   while(n > 0){
       int d = n % b;
       n = n / b;
       rv += p * d;
       p = p * 10;
   }

    return rv;
}
}
                        


c++ solution

 #include<iostream>
using namespace std;
double AnyToDec(int n,int b){
    int power = 1;
    double ans = 0;
    while(n>0){
        int digit = n%10;
        ans = ans + digit*power;
        n = n/10;
        power = power*b;
    }
    return ans;
}

double DecToAny(int n, int b){
    int power = 1;
    double ans = 0;
    while(n>0){
        int digit = n%b;
        ans +=digit*power;
        power = power*10;
        n = n/b;
    }
    return ans;
}
double AnyToAny(int n, int b1, int b2){
    double temp = AnyToDec(n,b1);
    double ans = DecToAny(temp,b2);
    return ans;
}

int main(){
    int n;
    int b1;
    int b2;
    cin >> n;
    cin >> b1;
    cin >> b2;
    double res = AnyToAny(n, b1, b2);
    cout<<res<<endl;
}         
