Abbreviation Using Backtracking
Medium

1. You are given a word.
2. You have to generate all abbrevations of that word.

Use recursion as suggested in question video

Constraints
1 <= length of string <= 32

Format
Input
A string representing a word

Output
Check the sample ouput and question video.

Example
Sample Input

pep

Sample Output
pep
pe1
p1p
p2
1ep
1e1
2p
3

import java.io.*;
import java.util.*;

public class Main {

    public static void solution(String str, String asf,int count, int pos){
        if(pos == str.length()){
            if(count > 0){
                asf += count;
            }
            System.out.println(asf);
            return;
        }
        solution(str, asf + (count > 0 ? count : "" ) + str.charAt(pos), 0, pos + 1); //yes call -> including curr char
        solution(str, asf, count + 1, pos + 1); //not including curr char -> just converting letters to a number
    }

	public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        solution(str,"",0,0);
        // solution2(str);
    }
}

#include<iostream>
using namespace std;
    void solution(string str, string asf,int count, int pos)
    {
        if(pos==str.length())
        {
            if(count==0){
                cout<<asf<<endl;
            }
            else
            {
                cout<<asf+to_string(count)<<endl;
            }
            return;
        }
        //call of yes
        if(count==0)
        {
            solution(str,asf+str[pos],0,pos+1);
        }
        else
        {
            solution(str,asf+to_string(count)+str[pos],0,pos+1);
        }
        //call of no
        
        solution(str,asf,count+1,pos+1);
    }
	int main() {
        string str;
        cin >> str;
        solution(str,"",0,0);
        return 0;
    }

-----------------------------------------------------------------------------------------------------

N Queens - Branch And Bound
Hard

1. You are given a number n, the size of a chess board.
2. You are required to place n number of queens in the n * n cells of board such that no queen can 
     kill another.
Note - Queens kill at distance in all 8 directions
3. Complete the body of printNQueens function - without changing signature - to calculate and 
     print all safe configurations of n-queens

Use sample input and output to get more idea.

Note -> The online judge can't force you to write the function recursively but that is what the spirit 
               of question is.

Write recursive and not iterative logic. The purpose of the question is to aid learning recursion, branch and bound technique and not test you.

Constraints
1 <= n <= 10

Format
Input
A number n

Output
Safe configurations of queens as suggested in sample output

Example
Sample Input

4

Sample Output
0-1, 1-3, 2-0, 3-2, .
0-2, 1-0, 2-3, 3-1, .

import java.io.*;
import java.util.*;

public class Main {

  public static void solution(boolean[][] board, int row, boolean[] cols, boolean[] ndiag, boolean[] rdiag, String asf) {
    if (row == board.length) {
      System.out.println(asf + ".");
      return;
    }

    for (int col = 0; col < board.length; col++) {
      if (!cols[col] && !ndiag[row + col] && !rdiag[row - col + board.length - 1]) {
        board[row][col] = true;
        cols[col] = true;
        ndiag[row + col] = true;
        rdiag[row - col + board.length - 1] = true;
        solution(board, row + 1, cols, ndiag, rdiag, asf + row + "-" + col + ", ");
        board[row][col] = false;
        cols[col] = false;
        ndiag[row + col] = false;
        rdiag[row - col + board.length - 1] = false;
      }
    }
  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    boolean[][] board = new boolean[n][n];
    boolean[] cols = new boolean[n];
    boolean[] ndiag = new boolean[2 * n - 1];
    boolean[] rdiag = new boolean[2 * n - 1];
    solution(board, 0, cols, ndiag, rdiag, "");
  }

}

no cpp solution

-------------------------------------------------------------------------------------------------
Max Score
Hard

1. You are given a list of words, a list of alphabets(might be repeating) and score of every alphabet 
     from a to z.
2. You have to find the maximum score of any valid set of words formed by using the given 
     alphabets.
3. A word can not be used more than one time.
4. Each alphabet can be used only once. 
5. It is not necessary to use all the given alphabets.

Note -> Check out the question video and write the recursive code as it is intended without 
               changing signature. The judge can't force you but intends you to teach a concept.

Constraints
1 <= N <= 14
1 <= length of word <= 15
1 <= M <= 100
1 <= Value of score <= 10

Format
Input
A number N representing number of words
N space separated strings
A number M representing number of alphabets(might be repeating)
M space separated characters
26 numbers representing score of unique alphabets from a to z.

Output
Check the sample ouput and question video.

Example
Sample Input

4
dog cat dad good
9
a b c d d d g o o
1 0 9 5 0 0 3 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0

Sample Output
23

import java.io.*;
import java.util.*;

public class Main {

	public static void main(String[] args) {

		Scanner scn = new Scanner(System.in);
		int nofWords = scn.nextInt();
		String[] words = new String[nofWords];
		for(int i = 0 ; i < words.length; i++) {
			words[i] = scn.next();
		}
		int nofLetters = scn.nextInt();
		char[] letters = new char[nofLetters];
		for (int i = 0; i < letters.length; i++) {
			letters[i] = scn.next().charAt(0);
		}
		int[] score = new int[26];
		for (int i = 0; i < score.length; i++) {
			score[i] = scn.nextInt();
		}
		if (words == null || words.length == 0 || letters == null || letters.length == 0 || score == null
				|| score.length == 0) {
			System.out.println(0);
			return;
		}
		int[] farr = new int[score.length];
		for (char ch : letters) {
			farr[ch - ''a'']++;
		}
		System.out.println(solution2(words, farr, score, 0));

	}

	public static int solution2(String[] words, int[] farr, int[] score, int idx) {
		if (idx == words.length) {
			return 0;
		}

		int max1 = solution2(words, farr, score, idx + 1);
		int max2 = 0;

		boolean isValid = true;
		int scoreofCW = 0;
		for (char ch : words[idx].toCharArray()) {
			farr[ch - ''a'']--;
			if (farr[ch - ''a''] < 0) {
				isValid = false;
			}
			scoreofCW += score[ch - ''a''];
		}
		if (isValid) {
			max2 = solution2(words, farr, score, idx + 1);
			max2 += scoreofCW;
		}
		for (char ch : words[idx].toCharArray()) {
			farr[ch - ''a'']++;
		}
		return Math.max(max1, max2);
	}
}

----------------------------------------------------------------------------------------------------------

Josephus Problem
Easy

1. You are given two numbers N and K.
2. N represents the total number of soldiers standing in a circle having position marked from 0 to N-1.
3. A cruel king wants to execute them but in a different way.
4. He starts executing soldiers from 0th position and proceeds around the circle in clockwise direction.
5. In each step, k-1 soldiers are skipped and the k-th soldier is executed.
6. The elimination proceeds around the circle (which is becoming smaller and smaller as the executed soldiers are removed), until only the last soldier remains, who is given freedom.
7. You have to find the position of that lucky soldier.

Note -> Check out the question video and write the recursive code as it is intended without  changing signature. The judge can't force you but intends you to teach a concept.

Constraints
1 <= N,K <= 200

Format
Input
2 numbers N and K

Output
Check the sample ouput and question video.

Example
Sample Input

4
2

Sample Output
0

import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args){
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();
    int k = scn.nextInt();
    System.out.println(solution(n,k));
  }

  public static int solution(int n, int k){
    if(n == 1){
      return 0;
    }else{
      return (solution(n - 1, k) + k) % n;
    }
  }
  

}

---------------------------------------------------------------------------------------------------------
Lexicographical Numbers
Medium

1. You are given a number.
2. You have to print all the numbers from 1 to n in lexicographical order.

Note -> Check out the question video and write the recursive code as it is intended without 
               changing signature. The judge can't force you but intends you to teach a concept.

Constraints
1 <= n <= 50000

Format
Input
A number

Output
Check the sample output and question video

Example
Sample Input

14

Sample Output
1
10
11
12
13
14
2
3
4
5
6
7
8
9

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		for(int i = 1; i < 10;i++){
			dfs(i,n);
		}
	}
	
	public static void dfs(int cur, int n){
		if(cur > n){
			return;
		}
        else{
            System.out.println(cur);
            for(int i = 0;i < 10;i++){
                dfs(10 * cur + i, n);
            }
        }
    }
}

--------------------------------------------------------------------------------------------------
Gold Mine - 2
Easy

1. You are given a number n, representing the number of rows.
2. You are given a number m, representing the number of columns.
3. You are given n*m numbers, representing elements of 2d array a, which represents a gold mine.
4. You are allowed to take one step left, right, up or down from your current position.
5. You can't visit a cell with 0 gold and the same cell more than once. 
6. Each cell has a value that is the amount of gold available in the cell.
7. You are required to identify the maximum amount of gold that can be dug out from the mine if 
     you start and stop collecting gold from any position in the grid that has some gold.

Note -> Check out the question video and write the recursive code as it is intended without 
               changing signature. The judge can't force you but intends you to teach a concept.

Constraints
1 <= n <= 10
1 <= m <= 10
0 <= e1, e2, .. n * m elements <= 1000

Format
Input
A number n
A number m
e11
e12..
e12
e22..
m*n numbers

Output
Maximum gold collected

Example
Sample Input

6
6
0 1 4 2 8 2
4 3 6 5 0 4
1 2 4 1 4 6
2 0 7 3 2 2
3 1 5 9 2 4
2 7 0 8 5 1

Sample Output
120

import java.io.*;
import java.util.*;

public class Main {
	static int max = 0;
	
	public static void travelAndCollectGold(int[][] arr, int i, int j, 
	                                        boolean[][] visited, 
	                                        ArrayList<Integer> bag){
	    if(i < 0  || j < 0 || i >= arr.length || j >= arr[0].length || 
	       arr[i][j] == 0 || visited[i][j] == true){
	        return;
	    }
	    
	    visited[i][j] = true;
	    bag.add(arr[i][j]);
	    travelAndCollectGold(arr, i - 1, j, visited, bag);
	    travelAndCollectGold(arr, i, j + 1, visited, bag);
	    travelAndCollectGold(arr, i, j - 1, visited, bag);
	    travelAndCollectGold(arr, i + 1, j, visited, bag);
	}
	
	public static void getMaxGold(int[][] arr){
		boolean[][] visited = new boolean[arr.length][arr[0].length];
		
		for(int i = 0; i < arr.length; i++){
		    for(int j = 0; j < arr[i].length; j++){
		        if(arr[i][j] != 0 && visited[i][j] == false){
		            ArrayList<Integer> bag = new ArrayList<>();
		            travelAndCollectGold(arr, i, j, visited, bag);
		            
		            int sum = 0;
		            for(int val: bag){
		                sum += val;
		            }
		            if(sum > max){
		                max = sum;
		            }
		        }
		    }
		}
	}
	
	
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int n = scn.nextInt();
		int m = scn.nextInt();
		int[][] arr = new int[m][n];
		for(int i = 0; i < arr.length; i++){
			for(int j = 0 ; j  < arr[0].length; j++){
				arr[i][j] = scn.nextInt();
			}
		}
		getMaxGold(arr);
		System.out.println(max);
	}
		
}

-------------------------------------------------------------------------------------------------------

Solve Sudoku
Hard

1. You are give a partially filled 9*9 2-D array(arr) which represents an incomplete sudoku state.
2. You are required to assign the digits from 1 to 9 to the empty cells following some rules.
Rule 1 -> Digits from 1-9 must occur exactly once in each row.
Rule 2 -> Digits from 1-9 must occur exactly once in each column.
Rule 3 -> Digits from 1-9 must occur exactly once in each 3x3 sub-array of the given 2D array.

Assumption -> The given Sudoku puzzle will have a single unique solution.

Constraints
0 <= arr[i][j] <= 9

Format
Input
9*9 integers ranging from 1 to 9.
0 represents an empty cell.

Output
You have to print the solved sudoku.

Example
Sample Input

3 0 6 5 0 8 4 0 0
5 2 0 0 0 0 0 0 0
0 8 7 0 0 0 0 3 1
0 0 3 0 1 0 0 8 0
9 0 0 8 6 3 0 0 5
0 5 0 0 9 0 6 0 0
1 3 0 0 0 0 2 5 0
0 0 0 0 0 0 0 7 4
0 0 5 2 0 6 3 0 0

Sample Output
3 1 6 5 7 8 4 9 2 
5 2 9 1 3 4 7 6 8 
4 8 7 6 2 9 5 3 1 
2 6 3 4 1 5 9 8 7 
9 7 4 8 6 3 1 2 5 
8 5 1 7 9 2 6 4 3 
1 3 8 9 4 7 2 5 6 
6 9 2 3 5 1 8 7 4 
7 4 5 2 8 6 3 1 9 

// import java.io.*;
import java.util.*;

public class Main {
  public static void display(int[][] board){
    for(int i = 0; i < board.length; i++){
      for(int j = 0; j < board[0].length; j++){
        System.out.print(board[i][j] + " ");
      }
      System.out.println();
    }
  }

  public static void solveSudoku(int[][] board, int i, int j) {
    if (i == board.length){
      display(board);
      return;
    }

    int ni = 0;
    int nj = 0;

    if(j == board[0].length - 1){
      ni = i + 1;
      nj = 0;
    } else {
      ni = i;
      nj = j + 1;
    }

    if(board[i][j] != 0){
      solveSudoku(board, ni, nj);
    } else {
      for(int val = 1; val <= 9; val++){
        if(isValid(board, i, j, val)){
          board[i][j] = val;
          solveSudoku(board, ni, nj);
          board[i][j] = 0;
        }
      }
    }
  }

  public static boolean isValid(int[][] board, int x, int y, int val) {
    int n = board.length;
    for (int i = 0; i < n; i++) {
      if (board[x][i] == val) {
        return false;
      }
    }

    for (int i = 0; i < n; i++) {
      if (board[i][y] == val) {
        return false;
      }
    }

    x = x / 3 * 3;
    y = y / 3 * 3;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (board[x + i][y + j] == val) {
          return false;
        }
      }
    }

    return true;
  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int[][] arr = new int[9][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        arr[i][j] = scn.nextInt();
      }
    }

    solveSudoku(arr, 0, 0);
  }
}
-----------------------------------------------------------------------------------------------------

Crossword Puzzle
Easy

1. You are given a 10*10 2-D array(arr) containing only '+' and '-' characters, which represents a 
    crossword puzzle. 
2. You are also given n number of words which need to be filled into the crossword.
3. Cells containing '-' are to be filled with the given words.

Note -> Check out the question video and write the recursive code as it is intended without 
               changing signature. The judge can't force you but intends you to teach a concept.

Constraints
1 <= n <= 10

Format
Input
10 * 10 grid of characters containing only '+' and '-' 
A number n
str1
str2
...n strings

Output
Check the sample output and question video

Example
Sample Input

+-++++++++
+-++++++++
+-++++++++
+-----++++
+-+++-++++
+-+++-++++
+++++-++++
++------++
+++++-++++
+++++-++++
4
LONDON
DELHI 
ICELAND 
ANKARA

Sample Output
+L++++++++
+O++++++++
+N++++++++
+DELHI++++
+O+++C++++
+N+++E++++
+++++L++++
++ANKARA++
+++++N++++
+++++D++++

import java.io.*;
import java.util.*;

public class Main {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		char[][] arr = new char[10][10];
		for(int i = 0 ; i < arr.length; i++){
			String str = scn.next();
			arr[i] = str.toCharArray();
		}
		int n = scn.nextInt();
		String[] words = new String[n];
		for(int i = 0 ; i  < words.length; i++){
			words[i] = scn.next();
		}
		solution(arr,words,0);

	}

	public static void solution(char[][] arr, String[] words, int vidx){
		if(vidx == words.length){
			print(arr);
			return;
		}
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				String word = words[vidx];
				if(arr[i][j] == ''-'' || arr[i][j] == word.charAt(0)){
					if(canPlaceVertical(arr,word,i,j) == true){
						boolean[] visited = new boolean[word.length()];
						placeVertical(arr,word,i,j,visited);
						//call
						solution(arr,words,vidx + 1);
						unplaceVertical(arr,word,i,j,visited);
					}

					if(canPlaceHorizontal(arr,word,i,j) == true){
						boolean[] visited = new boolean[word.length()];
						placeHorizontal(arr,word,i,j,visited);
						//call
						solution(arr,words,vidx + 1);
						unplaceHorizontal(arr,word,i,j,visited);
					}
				}
			}
		}
	}

	public static boolean canPlaceVertical(char[][] arr, String word, int r, int c){
		int i = 0 ;
		for(; i < word.length(); i++){
			if(r + i >= arr.length){
				return false;
			}
			if(arr[r + i][c] == ''-'' || arr[r + i][c] == word.charAt(i)){
				continue;
			}else{
				return false;
			}
		}
		
		if(r + i == arr.length || arr[r + i][c] == ''+'') {
			return true;
		}else {
			return false;
		}
	}

	public static boolean canPlaceHorizontal(char[][] arr, String word, int r, int c){
		int i = 0;
		for(; i < word.length(); i++){
			if(c + i >= arr.length){
				return false;
			}
			if(arr[r][c + i] == ''-'' || arr[r][c + i] == word.charAt(i)){
				continue;
			}else{
				return false;
			}
		}
		if(c + i == arr.length || arr[r][c + i] == ''+'') {
			return true;
		}else {
			return false;
		}
	}

	public static void placeVertical(char[][] arr, String word, int r, int c,boolean[] visited){
		for(int i = 0 ; i < word.length(); i++){
			if(arr[r + i][c] == ''-''){
				visited[i] = true;
			}
			arr[r + i][c] = word.charAt(i);
		}
	}

	public static void unplaceVertical(char[][] arr, String word, int r, int c, boolean[] visited){
		for(int i = 0 ; i < word.length(); i++){
			if(visited[i] == true){
				arr[r + i][c] = ''-'';	
			}
		}
	}

	public static void placeHorizontal(char[][] arr, String word, int r, int c,boolean[] visited){
		for(int i = 0 ; i < word.length(); i++){
			if (arr[r][c + i] == ''-'') {
				visited[i] = true;
			}
			arr[r][c + i] = word.charAt(i);
		}
	}

	public static void unplaceHorizontal(char[][] arr, String word, int r, int c, boolean[] visited){
		for(int i = 0 ; i < word.length(); i++){
			if(visited[i] == true){
				arr[r][c + i] = ''-'';	
			}
		}
	}
	
	public static void print(char[][] arr){
		for(int i = 0 ; i < arr.length; i++){
			for(int j = 0 ; j < arr.length; j++){
				System.out.print(arr[i][j] +  "");
			}
			System.out.println();
		}
		
	}
}


-----------------------------------------------------------------------------------------------------

